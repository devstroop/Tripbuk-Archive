// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tripbuk.Server.Data;

#nullable disable

namespace Tripbuk.Server.Migrations
{
    [DbContext(typeof(PostgresContext))]
    [Migration("00000000000001_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tripbuk.Server.Models.Postgres.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryCallingCode")
                        .HasColumnType("text");

                    b.Property<string>("DefaultCurrencyCode")
                        .HasColumnType("text");

                    b.Property<string>("DestinationUrl")
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("Iatacodes")
                        .HasColumnType("text[]")
                        .HasColumnName("IATACodes");

                    b.PrimitiveCollection<List<string>>("Languages")
                        .HasColumnType("text[]");

                    b.Property<int?>("LocationCenterId")
                        .HasColumnType("integer");

                    b.Property<string>("LookupId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentDestinationId")
                        .HasColumnType("integer");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocationCenterId");

                    b.ToTable("Destinations", "public", t =>
                        {
                            t.HasTrigger("Destinations_Trigger");
                        });
                });

            modelBuilder.Entity("Tripbuk.Server.Models.Postgres.LocationCenter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("LocationCenters", "public", t =>
                        {
                            t.HasTrigger("LocationCenters_Trigger");
                        });
                });

            modelBuilder.Entity("Tripbuk.Server.Models.Postgres.ParentTag", b =>
                {
                    b.Property<int>("ChildTagId")
                        .HasColumnType("integer");

                    b.Property<int>("ParentTagId")
                        .HasColumnType("integer");

                    b.ToTable("ParentTags", "public", t =>
                        {
                            t.HasTrigger("ParentTags_Trigger");
                        });
                });

            modelBuilder.Entity("Tripbuk.Server.Models.Postgres.Place", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Center")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("DestinationId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("Images")
                        .HasColumnType("text[]");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Summary")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.ToTable("Places", "public", t =>
                        {
                            t.HasTrigger("Places_Trigger");
                        });
                });

            modelBuilder.Entity("Tripbuk.Server.Models.Postgres.PlaceTag", b =>
                {
                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uuid");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.ToTable("PlaceTags", "public", t =>
                        {
                            t.HasTrigger("PlaceTags_Trigger");
                        });
                });

            modelBuilder.Entity("Tripbuk.Server.Models.Postgres.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AllNamesByLocale")
                        .HasColumnType("text");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags", "public", t =>
                        {
                            t.HasTrigger("Tags_Trigger");
                        });
                });

            modelBuilder.Entity("Tripbuk.Server.Models.Postgres.Destination", b =>
                {
                    b.HasOne("Tripbuk.Server.Models.Postgres.LocationCenter", "LocationCenter")
                        .WithMany("Destinations")
                        .HasForeignKey("LocationCenterId");

                    b.Navigation("LocationCenter");
                });

            modelBuilder.Entity("Tripbuk.Server.Models.Postgres.Place", b =>
                {
                    b.HasOne("Tripbuk.Server.Models.Postgres.Destination", "Destination")
                        .WithMany("Places")
                        .HasForeignKey("DestinationId");

                    b.Navigation("Destination");
                });

            modelBuilder.Entity("Tripbuk.Server.Models.Postgres.Destination", b =>
                {
                    b.Navigation("Places");
                });

            modelBuilder.Entity("Tripbuk.Server.Models.Postgres.LocationCenter", b =>
                {
                    b.Navigation("Destinations");
                });
#pragma warning restore 612, 618
        }
    }
}
